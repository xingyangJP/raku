name: Deploy to Xserver

on:
  push:
    branches: [ main, dev ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'

    - name: Install Composer Dependencies (update lock for runtime change)
      run: composer update --no-dev --prefer-dist --no-interaction --optimize-autoloader

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install NPM Dependencies
      run: npm install

    - name: Build Frontend Assets
      run: npm run build

    - name: Determine Deployment Paths
      id: paths
      run: |
        if [ "${GITHUB_REF}" = "refs/heads/dev" ]; then
          echo "deploy_root=/home/xero/rakudev" >> "$GITHUB_OUTPUT"
          echo "public_link=/home/xero/xerographix.co.jp/public_html/salesdev" >> "$GITHUB_OUTPUT"
        else
          echo "deploy_root=/home/xero/raku" >> "$GITHUB_OUTPUT"
          echo "public_link=/home/xero/xerographix.co.jp/public_html/sales" >> "$GITHUB_OUTPUT"
        fi

    - name: Deploy Files with Manual rsync
      run: |
        echo "${{ secrets.ACTIONS_DEPLOY_KEY }}" > private_key.pem
        chmod 600 private_key.pem
        rsync -avz -e "ssh -i private_key.pem -p 10022 -o StrictHostKeyChecking=no" \
          --exclude='.git' --exclude='node_modules' --exclude='.env' \
          ./ xero@xero.xsrv.jp:${{ steps.paths.outputs.deploy_root }}/

    - name: Run Post-Deploy Commands on Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: xero.xsrv.jp
        username: xero
        key: ${{ secrets.ACTIONS_DEPLOY_KEY }}
        port: 10022
        script: |
          set -e
          cd ${{ steps.paths.outputs.deploy_root }}

          # Remove opcache_reset.php file for security
          rm -f public/opcache_reset.php

          # .env file is now managed manually on the server.
          # This script will no longer create or modify .env or APP_KEY.

          # Ensure SQLite file exists when using sqlite connection
          if [ ! -f database/database.sqlite ]; then
            mkdir -p database
            touch database/database.sqlite
          fi

          chmod -R 777 storage bootstrap/cache
          /opt/php-8.2.28-2/bin/php artisan config:clear
          /opt/php-8.2.28-2/bin/php artisan migrate --force --seed
          /opt/php-8.2.28-2/bin/php artisan cache:clear
          /opt/php-8.2.28-2/bin/php artisan route:cache
          /opt/php-8.2.28-2/bin/php artisan view:cache
          /opt/php-8.2.28-2/bin/php artisan config:cache
          rm -rf ${{ steps.paths.outputs.public_link }}
          ln -s ${{ steps.paths.outputs.deploy_root }}/public ${{ steps.paths.outputs.public_link }}
          echo "ðŸš€ Deployment finished successfully."
